#!/usr/bin/perl 
my ($myedata,$myend,$initmips,$mystart);
open(F,qq(objdump -x $ARGV[0]|));
while(<F>)
{
chomp;
if(/([0-9a-f]+).+_edata/){
   $myedata=qq(0x$1);
 }

if(/([0-9a-f]+).+_end$/){
   $myend=qq(0x$1);
 }
if(/([0-9a-f]+).+initmips$/){
   $myinitmips=qq(0x$1);
 }
if(/([0-9a-f]+).+\s_start$/){
   $mystart=qq(0x$1);
 }
}
printf(<< "END"
void realinitmips(unsigned int msize);
void enable_cache()
{
	    __asm__ volatile(
		".set mips2;\\n" \\
"        mfc0   \$4,\$16;\\n" \\
"        and    \$4,\$4,0xfffffff8;\\n" \\
"        or     \$4,\$4,0x3;\\n" \\
"        mtc0   \$4,\$16;\\n" \\
"		.set mips0;\\n"
		::
		:"\$4"
		);
}

#ifndef NOCACHE2
void flush_cache2()
{
asm volatile(\
".set mips3;\\n" \\
"	li	  \$2, 0x80000000;\\n" \\
"   addu  \$3,\$2,512*1024/4;\\n" \\
"10:\\n" \\
"	cache	3, 0(\$2);\\n" \\
"	cache	3, 1(\$2);\\n" \\
"	cache	3, 2(\$2);\\n" \\
"	cache	3, 3(\$2);\\n" \\
"	addu	\$2, 32;\\n" \\
"	bne	    \$2,\$3, 10b;\\n" \\
"	nop;\\n" \\
:::"\$2","\$3"
);
}
#else
void flush_cache()
{

#ifndef WAYBIT
#define WAYBIT 0
#endif
#define WAY__(x) #x
#define WAY_(x,y) WAY__((x<<y))
#define WAY(x) WAY_(x,WAYBIT)
asm volatile(\
"		.set mips3;\\n" 
"        li    \$5,0x80000000;\\n" 
"        addu  \$6,\$5,16384;\\n" 
"1:\\n" 
"        cache  1," WAY(0) "(\$5);\\n" 
"        cache  1," WAY(1) "(\$5);\\n" 
"        cache  1," WAY(2) "(\$5);\\n" 
"        cache  1," WAY(3) "(\$5);\\n" 
"        cache  0," WAY(0) "(\$5);\\n" 
"        cache  0," WAY(1) "(\$5);\\n" 
"        cache  0," WAY(2) "(\$5);\\n" 
"        cache  0," WAY(3) "(\$5);\\n" 
"        add    \$5,\$5,32;\\n" 
"        bne    \$5,\$6,1b;\\n" 
"        nop;\\n" 
"		.set mips0;\\n" 
::: "\$5","\$6");
}
#endif

int test_cache()
{
    int r;
asm volatile(\
"		.set mips32;\\n" 
"        li    \$8,0x80001000;\\n" 
"        li    \$9,0x80000000;\\n" 
"        li    \$10,0x1fffffc0;\\n" 
"1:\\n" 
"        cache  0x5,0x(\$9);\\n" 
"        mfc0   \$11,\$28;\\n" 
"        beq    \$11,\$10,1f;\\n" 
"        nop;\\n" 
"        addiu  \$9,\$9,0x20;\\n" 
"        bne    \$9,\$8,1b;\\n" 
"        nop;\\n" 
"        addu   \%0,\$0,\$0;\\n" 
"        b 2f;\\n" 
"        nop;\\n" 
"1:\\n" 
"        addiu  \%0,\$0,0x1;\\n" 
"2:\\n" 
"		.set mips1;\\n" 
:"=r"(r)
:
: "\$8","\$9","\$10","\$11");

     return r;
}

int test_tlb()
{
    int r;
asm volatile(\
"		.set mips32;\\n" 
"        li     \$8,0x00000000;\\n" 
"        li     \$9,32;\\n" 
"        li     \$10,0x43fffffe;\\n" 
"1:\\n" 
"        mtc0   \$8,\$0;\\n" 
"        tlbr;\\n" 
"        mfc0   \$11,\$2;\\n" 
"        beq    \$11,\$10,1f;\\n" 
"        nop;\\n" 
"        mfc0   \$11,\$3;\\n" 
"        beq    \$11,\$10,1f;\\n" 
"        nop;\\n" 
"        addiu  \$8,\$8,0x1;\\n" 
"        bne    \$9,\$8,1b;\\n" 
"        nop;\\n" 
"        addu   \%0,\$0,\$0;\\n" 
"        b 2f;\\n" 
"        nop;\\n" 
"1:\\n" 
"        addiu  \%0,\$0,0x1;\\n" 
"2:\\n" 
"		.set mips1;\\n" 
:"=r"(r)
:
: "\$8","\$9","\$10","\$11");

     return r;
}

void led_on(char witch)
{
asm volatile(\
	"	li	  \$2, 0xbfd00010;\\n" \
	"	lb	\$3, 0(\$2);\\n"
	"	and \$3, \$3, \%0;\\n"
	"	sb	\$3, 0(\$2); \\n" \
	:
	:"r"(witch)
	: "\$2", "\$3"
	);
}

void initmips(unsigned int msize,int dmsize,int dctrl)
{
    long *edata=(void *)$myedata;
    long *end=(void *)$myend;
    int *p;
    int a,b;
	int debug=(msize==0);
	CPU_TLBClear();
    a = test_tlb();
    b = test_cache();

    if (a)
    {
       tgt_puts("\\r\\n TLB init Error!!! \\r\\n");
    }
    else
    {
        tgt_puts("\\r\\n TLB init OK!!! \\r\\n");
    }

    if (b)
    {
       tgt_puts("\\r\\n cache init Error!!! \\r\\n");
    }
    else
    {
       tgt_puts("\\r\\n cache init OK!!! \\r\\n");
    }

    if (a||b){
       tgt_puts("\\r\\n ERROR!!! \\r\\n");
       tgt_puts("\\r\\n ERROR!!! \\r\\n");
       tgt_puts("\\r\\n ERROR!!! \\r\\n");
       tgt_puts("\\r\\n !!!!!!!!!!!!!!!!!! \\r\\n");
    }

    tgt_puts("\\r\\n Uncompressing Bios \\r\\n");
    if(!debug||dctrl&1) {
		enable_cache();
	}
	led_on(0x6f);
	while(1)
	{
    if(run_unzip(biosdata,$mystart)>=0)break;
	}
    tgt_puts("\\r\\n OK,Booting Bios\\r\\n");
    for(p=edata;p<=end;p++)
    {
        *p=0;
    }
	memset($mystart-0x1000,0,0x1000);//$mystart-0x1000 for frame(registers),memset for pretty
#ifdef NOCACHE2
	//flush_cache(); // Lc modify
#else
	//flush_cache2(); //Lc modify
#endif
    realinitmips(debug?dmsize:msize);
}


void realinitmips(unsigned int msize)
{
	     asm ("li  \$29,$mystart-0x4000;\\n" \\
"		       li \$2,$myinitmips;\\n" \\
"			   move \$4,\%0;\\n" \\
"			   jalr \$2;\\n" \\
"			   nop;\\n" \\
"			  1: b 1b;nop;" \\
          :
          : "r" (msize)
          : "\$29", "\$2","\$4");

}
int tgt_puts(char *str)
{
	while(*str)
	tgt_putchar(*str++);
	return 0;
}
END
);
