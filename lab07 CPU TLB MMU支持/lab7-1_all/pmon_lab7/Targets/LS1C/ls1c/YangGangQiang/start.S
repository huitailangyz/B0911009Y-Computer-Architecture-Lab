/*	$Id: start.S,v 1.1.1.1 2006/09/14 01:59:08 root Exp $ */

/*
 * Copyright (c) 2001 Opsycon AB  (www.opsycon.se)
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by Opsycon AB, Sweden.
 * 4. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */

#ifndef _KERNEL
#define _KERNEL
#endif

#include <asm.h>
#include <regnum.h>
#include <cpu.h>
#include <pte.h>

#include "pmon/dev/ns16550.h"
#include "target/prid.h"
#include "target/sbd.h"
#include "target/fcr.h"
#include "target/via686b.h"
#include "target/i8254.h"
#include "target/isapnpreg.h"
/* #include "sys/arch/mips/include/cpu.h" */

#define DEBUG_LOCORE

#ifndef BOOT_FROM_EJTAG      
#define  BOOT_FROM_EJTAG
#endif
#undef BOOT_FROM_EJTAG

#ifdef DEBUG_LOCORE
#define	TTYDBG(x) \
	.rdata;98: .asciz x; .text; la a0, 98b; bal stringserial; nop
#	.rdata; .align 2; 98: .asciz x; .text; la a0, 98b; bal stringserial; nop
#else
#define TTYDBG(x)
#endif

#define	PRINTSTR(x) \
	.rdata;98: .asciz x; .text; la a0, 98b; bal stringserial; nop
#	.rdata; .align 2; 98: .asciz x; .text; la a0, 98b; bal stringserial; nop

/* Delay macro */
#define	DELAY(count)	\
	li v0, count;	\
99:			\
	bnez	v0, 99b;\
	addiu	v0, -1

#define tmpsize		s1
#define msize		s2
#define bonito		s4
#define dbg			s5
#define sdCfg		s6

#define CP0_CONFIG $16
#define CP0_TAGLO  $28
#define CP0_TAGHI  $29

#define Index_Store_Tag_D			0x09
#define Index_Invalidate_I			0x00
#define Index_Writeback_Inv_D			0x01

/*
 *   Register usage:
 *
 *	s0	link versus load offset, used to relocate absolute adresses.
 *	s1	free
 *	s2	memory size.
 *	s3	free.
 *	s4	Bonito base address.
 *	s5	dbg.
 *	s6	sdCfg.
 *	s7	rasave.
 *	s8	L3 Cache size.
 */


	.set	noreorder
    .set mips32
	.globl	_start
	.globl	start
	.globl	__main
_start:
start:
	.globl	stack
stack = start - 0x4000		/* Place PMON stack below PMON start in RAM */

/* NOTE!! Not more that 16 instructions here!!! Right now it's FULL! */
	mtc0	zero, COP_0_STATUS_REG
	mtc0	zero, COP_0_CAUSE_REG
	li	t0, SR_BOOT_EXC_VEC	/* Exception to Boostrap Location */
	mtc0	t0, COP_0_STATUS_REG
	la	sp, stack
	la	gp, _gp
	bal locate
	nop
locate:
	la	s0, locate
	subu	s0,ra,s0
	beqz s0, boot0
	nop

/* invalid cache */

/* lxy-gz: 20130320 */
#define		SDIO_BOOT	0

#define		NAND_BOOT   1 
#define		BOOT_FROM_NOT_SPI	(NAND_BOOT | SIDO_BOOT)

#if NAND_BOOT
#define SD_FREQ 0x30	
#endif 


#ifdef  CPU_2_SDRAM_DIV2
#define SDRAM_DIV           0x0
#define CPU_2_SDRAM         2

#elif defined  CPU_2_SDRAM_DIV3
#define SDRAM_DIV           0x2
#define CPU_2_SDRAM         3

#else
#define SDRAM_DIV           0x1
#define CPU_2_SDRAM         4

#endif


#ifndef BOOT_FROM_NOT_SPI
	/*spi speed*/
	li  t0, 0xbfe80000
	li  t1, 0x1f	// div 4, fast_read + burst_en + memory_en double I/O 模式 部分SPI flash可能不支持
	sb  t1, 0x4(t0)	// sfc_param
	li  t1, 0x05
	sb  t1, 0x6(t0)
#endif

//#define	SDRAM_PARAM_DIV_NUM		((1 << (SDRAM_DIV+1)) % 5)
/*
 *0xbfe78030
 * */
#define RST_TIME_000H   (0<<2)
#define RST_TIME_100H   (1<<2)
#define RST_TIME_400H   (2<<2)
#define RST_TIME_FF0H   (3<<2)

#if 0
#define CPU_2_SDRAM_DIV4     (0x1)
#define CPU_2_SDRAM_DIV3     (0x2)
#define CPU_2_SDRAM_DIV2     (0x0)
#endif

#define PLL_VAL     (1<<31)
#define RST_TIME        RST_TIME_FF0H 
#define _FRAC_N      (PLL_FRAC_N<<16)	
#define	_PLL_M	    (PLL_M<<8)


/*
 *  0xbfe78034
 * */
#define _CPU_DIV             (CPU_DIV /*1~127*/ <<8)
#define CPU_DIV_NORMAL      (1<<15|1<<1|1<<0)
#define CPU_DIV_BYPASS      (0<<15|0<<1|0<<0)

#define _CAM_DIV             (CAM_DIV /*1~127*/ <<16)
#define CAM_DIV_NORMAL      (1<<23|1<<3|1<<2)
#define CAM_DIV_BYPASS      (0<<23|0<<3|0<<2)

#define _PIX_DIV             (PIX_DIV /*1~127*/ <<24)
#define PIX_DIV_NORMAL      (1<<31|1<<5|1<<4)
#define PIX_DIV_BYPASS      (0<<31|0<<5|0<<4)

#ifndef  CPU_BYPASS
#define CPU_DIV_SEL     CPU_DIV_NORMAL
#else
#define CPU_DIV_SEL     CPU_DIV_BYPASS
#endif
#ifndef  CAM_BYPASS
#define CAM_DIV_SEL     CAM_DIV_NORMAL
#else
#define CAM_DIV_SEL     CAM_DIV_BYPASS
#endif
#ifndef  PIX_BYPASS
#define PIX_DIV_SEL     PIX_DIV_NORMAL
#else
#define PIX_DIV_SEL     PIX_DIV_BYPASS
#endif

#config pll div for cpu and sdram
	li	t0, 0xbfe78030
        li      t1,(_CPU_DIV | CPU_DIV_BYPASS|_PIX_DIV|PIX_DIV_BYPASS|_CAM_DIV|CAM_DIV_BYPASS)
	sw	t1, 0x4(t0)
        li	t1,(PLL_VAL | _FRAC_N | _PLL_M | RST_TIME | SDRAM_DIV);
	sw	t1, 0x0(t0)
#if 0
        li      v0,~0xf0
1:
        lw      t2,0x0(t0)
        and     t2,v0
        bne     t2,t1,1b
        nop
#endif
        li      t1,(_CPU_DIV | CPU_DIV_SEL|_PIX_DIV|PIX_DIV_SEL|_CAM_DIV|CAM_DIV_SEL)
	sw	t1, 0x4(t0)
	DELAY(2000)

#include "sdram_cfg.S"

#if	BOOT_FROM_NOT_SPI

#define	DSR_ADDR	0xa1000000   /* 0x80100000 */
#if 0    //disable cache	
	mfc0    t4, CP0_CONFIG, 0
	and    t4, t4, 0xfffffff8
	or     t4, t4, 2
    mtc0    t4, CP0_CONFIG, 0
	
#endif
	#if SDIO_BOOT
		#include "sdio_boot.S"
	#endif
	#if	NAND_BOOT
		#include "nand_boot.S"
	#endif
	
	/* cache init */
		#init data cache
		li		a0,	0x81000000
		li		a1,	16384/4
		li		a2,	16384/4

    	mtc0   $0, CP0_TAGHI
		mtc0   $0, CP0_TAGLO
    	
		addu   v0, $0, a0  ###??? $0 = 0
	    addu   v1, a0, a2
	1:  slt a3, v0, v1
		beq a3, $0, 1f
		nop
#if 1 

		cache Index_Store_Tag_D, 0x0(v0)
		cache Index_Store_Tag_D, 0x1(v0)
		cache   Index_Store_Tag_D, 0x2(v0)
		cache   Index_Store_Tag_D, 0x3(v0)
	    beq $0, $0, 1b   ###???
		addiu v0, v0, 0x20
	
	1:	
    	addu   v0, $0, a0
	    addu   v1, a0, a1
	1: 	slt a3, v0, v1
	    beq a3, $0, 1f
	    nop
	    cache Index_Invalidate_I, 0x0(v0)
	    cache Index_Invalidate_I, 0x1(v0)
	    cache Index_Invalidate_I, 0x2(v0)
	    cache Index_Invalidate_I, 0x3(v0)
	    beq $0, $0, 1b
	    addiu v0, v0, 0x20
1:
		move s0,zero
		/* enable cache */
		mfc0   $4,$16
    	and    $4,$4,0xfffffff8
    	or     $4,$4,0x3
    	mtc0   $4,$16
#endif
	/*     end       */
	la	t0, boot0
	jr	t0
	nop
#endif
	b boot0
	nop


	.align	8			/* bfc00300 */
	PRINTSTR("\r\nPANIC! Unexpected Cache Error exception! ")
	mfc0	a0, COP_0_CACHE_ERR
	bal	hexserial
	nop
	b	exc_common

/* General exception */
	.align	7			/* bfc00380 */
1:
	b 1b
	nop
	la	a0, v380_msg
	bal	stringserial
	nop
	b	exc_common
	
	.align	9			/* bfc00400 */
	la	a0, v400_msg
	bal	stringserial
	nop
	b	exc_common

	.align	7			/* bfc00480 */
	la	a0, v480_msg
	bal	stringserial
	nop
	b	exc_common

	
	.align	8			/* bfc00500 */
exc_common:
	PRINTSTR("\r\nCAUSE=")
	mfc0	a0, COP_0_CAUSE_REG
	bal	hexserial
	nop
	PRINTSTR("\r\nSTATUS=")
	mfc0	a0, COP_0_STATUS_REG
	bal	hexserial
	nop
	PRINTSTR("\r\nERRORPC=")
	mfc0	a0, COP_0_ERROR_PC
	bal	hexserial
	nop
	PRINTSTR("\r\nEPC=")
	mfc0	a0, COP_0_EXC_PC
	bal	hexserial
	nop
	PRINTSTR("\r\nDERR0=")
	cfc0	a0, COP_0_DERR_0
	bal	hexserial
	nop
	PRINTSTR("\r\nDERR1=")
	cfc0	a0, COP_0_DERR_1
	bal	hexserial
	nop

1:
    b   1b
    nop


	.align 9
		nop
	.align 8
	.word read
	.word write
	.word open
	.word close
	.word nullfunction
	.word printf
	.word vsprintf
	.word nullfunction
	.word nullfunction
	.word getenv
	.word nullfunction
	.word nullfunction
	.word nullfunction
	.word nullfunction


/*
 *  We get here from executing a bal to get the PC value of the current execute
 *  location into ra. Check to see if we run from ROM or if this is ramloaded.
 */
boot0:
	#bal	CPU_TLBClear
	#nop
	li	t0,SR_BOOT_EXC_VEC|SR_COP_1_BIT	
	mtc0	t0,COP_0_STATUS_REG
    mtc0    zero,COP_0_CAUSE_REG
        mtc1    zero,$f31
	.set noreorder


	li	t1, 0xbfd011c0		#uart3 config mux
	li	t2, 0x0
	sw	t2, 0x4(t1)

	li	t1, 0xbfd011d0		#uart3 config mux
	li	t2, 0x6
	sw	t2, 0x4(t1)

	li	t1, 0xbfd011e0		#uart3 config mux
	li	t2, 0x0
	sw	t2, 0x4(t1)

	li	t1, 0xbfd011f0		#uart3 config mux
	li	t2, 0x0
	sw	t2, 0x4(t1)


	bal	initserial
	nop

#if 1
	PRINTSTR("\r\ns0=")
    	move a0, s0
	bal	hexserial
	nop
	
#endif

	PRINTSTR("\r\nPMON2000 MIPS Initializing. Standby...\r\n")

#if 1
	PRINTSTR("ERRORPC=")
	mfc0	a0, COP_0_ERROR_PC
	bal	hexserial
	nop

	PRINTSTR(" CONFIG, select 1=")
    .set mips32
    mfc0    t5, CP0_CONFIG, 1
    add a0, t5, 0
    bal hexserial
    nop

#	mfc0	a0, COP_0_CONFIG
#	bal	hexserial
#	nop

	PRINTSTR("\r\n")
	
	PRINTSTR(" PRID=")
	mfc0	a0, COP_0_PRID
	bal	hexserial
	nop
	PRINTSTR("\r\n")

	/* disable all gpio */
    li  t1, 0xbfd00000
    sw  zero, 0x10c0(t1)
    sw  zero, 0x10c4(t1)
    sw  zero, 0x10c8(t1)
    sw  zero, 0x10cc(t1)
#endif


	bnez s0,1f
	nop

	/* Clear BSS */
	la	a0, _edata
	la	a2, _end
2:	sw	zero, 0(a0)
	bne	a2, a0, 2b
	addu	a0, 4
	li a0,32

	jal initmips
	nop
1:

	/* 
	 * Now determine DRAM configuration and size by
	 * reading the I2C EEROM on the DIMMS
	 */

#define CF_7_SE         (1 << 3)        /* Secondary cache enable */
#define CF_7_SC         (1 << 31)       /* Secondary cache not present */
#define CF_7_TE         (1 << 12)       /* Tertiary cache enable */
#define CF_7_TC         (1 << 17)       /* Tertiary cache not present */
#define CF_7_TS         (3 << 20)       /* Tertiary cache size */
#define CF_7_TS_AL      20              /* Shift to align */
#define NOP8 nop;nop;nop;nop;nop;nop;nop;nop

set_msize:

#        li      msize,0x04000000 #64MB
        li      msize,0x02000000  #32MB

#if	 !(BOOT_FROM_NOT_SPI)	

#if 0    
    li  t1, 0xbfd00410
    li  a1, SD_PARA0		#50MHz
    sw  a1, 0x0(t1)
    li  a1, SD_PARA1		#50MHz 32M
#     li  a1, 0x70465182      #40MHz double sdram
#    li  a1, 0x70465142      #40MHz single sdram
    sw  a1, 0x4(t1)
	DELAY(1000)
#endif
  /*
	PRINTSTR("\r\n 0xbfd00414 0x")
    li t0, 0xbfd00414
    lw a0, 0x0(t0)
    bal hexserial
    nop
*/
	PRINTSTR("\r\n sdram init done \r\n")



    li  t1, 0xbfd00410
    PRINTSTR("\r\n 0xbfd00414 = ")
    lw a0, 0x4(t1)
    bal hexserial
    nop
    lw a0, 0x0(t1)    
    PRINTSTR("\r\n 0xbfd00410 = ")
    bal hexserial
    nop





do_caches:
	TTYDBG("Init caches...\r\n")

	li	s7, 0                   /* no L2 cache */
	li	s8, 0                   /* no L3 cache */

	TTYDBG("godson1 caches found\r\n")
    bal     cache_init
    nop

	mfc0   a0, COP_0_CONFIG
	and    a0, a0, ~((1<<12) | 7)
	or     a0, a0, 2
	mtc0   a0, COP_0_CONFIG

	TTYDBG("Init caches done, cfg = ")
	mfc0	a0, COP_0_CONFIG
	bal	hexserial
	nop
	TTYDBG("\r\n")

#endif


#define	FCALL_PRINTSTR(x) \
	.rdata;98: .asciz x; .text; la a0, 98b; la v0, stringserial; addu v0,s0;jalr v0; nop	

#undef BAL
#define BAL(x) \
	la v0,x; \
	addu v0,s0; \
	jalr v0; \
	nop;



#if 0
PRINTSTR("begin test\r\n");


#include "newtest.32/mydebug.S"
bootnow:
PRINTSTR("end test\r\n");

#endif


/*copy copy program to sdram to make copy fast*/

#if 1 
	la t0,121f
	addu t0,s0
	la t1,122f
	addu t1,s0
	
	li t2,0xa0000000
1:
	lw  v0,(t0)
	sw v0,(t2)
	addu t0,4
	addu t2,4
	ble t0,t1,1b
	nop

	li t0,0xa0000000
   	jr t0	
	nop		
#endif

.align 3
/* run in sdram */
121: 
	FCALL_PRINTSTR("Copy PMON to execute location...\r\n")
	la	a0, start
	addu a1,a0,s0
	la	a2, _edata
        or      a0, 0xa0000000
        or      a2, 0xa0000000
	subu	t1, a2, a0
	srl	t1, t1, 2

	move	t0, a0
	move	t1, a1
	move	t2, a2

	/* copy text section */
1:	and	t3,t0,0x0000ffff
	bnez	t3,2f
	nop
	move	a0,t0
	BAL(hexserial)
	nop
	li	a0,'\r'
	BAL(tgt_putchar)
	nop
2:	lw	t3, 0(t1)
	nop
	sw	t3, 0(t0)
	addu	t0, 4
	addu	t1, 4
	bne	t2, t0, 1b
	nop
	FCALL_PRINTSTR("\ncopy text section done.\r\n")
	
	/* Clear BSS */
	la	a0, _edata
	la	a2, _end
2:	sw	zero, 0(a0)
	bne	a2, a0, 2b
	addu	a0, 4


	FCALL_PRINTSTR("Copy PMON to execute location done.\r\n")
	FCALL_PRINTSTR("sp=");
	move a0, sp
	BAL(hexserial)
	nop

	li	a0, 0
	sw	a0, CpuTertiaryCacheSize /* Set L3 cache size */

	move	a0,msize
	srl	a0,20

	la	v0, initmips
#	addu v0, s0   
#if 1
	jalr	v0
	nop
#else
	.set mips32
	mtc0 v0, $24
	li v0,0xff2001b8
	sw zero,(v0)
	deret
	.set mips0
#endif

.align 3
122:

stuck:
	b	stuck
	nop

/*
 *  Clear the TLB. Normally called from start.S.
 */
#if __mips64
#define MTC0 dmtc0
#else 
#define MTC0 mtc0
#endif


LEAF(CPU_TLBClear)
	li	a3, 0			# First TLB index.

	li	a2, PG_SIZE_4K
	MTC0   a2, COP_0_TLB_PG_MASK   # Whatever...

1:
	MTC0   zero, COP_0_TLB_HI	# Clear entry high.
	MTC0   zero, COP_0_TLB_LO0	# Clear entry low0.
	MTC0   zero, COP_0_TLB_LO1	# Clear entry low1.

	mtc0    a3, COP_0_TLB_INDEX	# Set the index.
	addiu	a3, 1
	li	a2, 64
	nop
	nop
	tlbwi				# Write the TLB

	bne	a3, a2, 1b
	nop

	jr	ra
	nop
END(CPU_TLBClear)

/*
 *  Set up the TLB. Normally called from start.S.
 */
LEAF(CPU_TLBInit)
	li	a3, 0			# First TLB index.

	li	a2, PG_SIZE_16M
	MTC0   a2, COP_0_TLB_PG_MASK   # All pages are 16Mb.

1:
	and	a2, a0, PG_SVPN
	MTC0   a2, COP_0_TLB_HI	# Set up entry high.

	move	a2, a0
	srl	a2, a0, PG_SHIFT 
	and	a2, a2, PG_FRAME
	ori	a2, PG_IOPAGE
	MTC0   a2, COP_0_TLB_LO0	# Set up entry low0.
	addu	a2, (0x01000000 >> PG_SHIFT)
	MTC0   a2, COP_0_TLB_LO1	# Set up entry low1.

	mtc0    a3, COP_0_TLB_INDEX	# Set the index.
	addiu	a3, 1
	li	a2, 0x02000000
	subu	a1, a2
	nop
	tlbwi				# Write the TLB

	bgtz	a1, 1b
	addu	a0, a2			# Step address 32Mb.

	jr	ra
	nop
END(CPU_TLBInit)

LEAF(stringserial)
	nop
	move	a2, ra
	addu	a1, a0, s0
	lbu	a0, 0(a1)
1:
	beqz	a0, 2f
	nop
	bal	tgt_putchar
	addiu	a1, 1
	b	1b
	lbu	a0, 0(a1)

2:
	j	a2
	nop
END(stringserial)

LEAF(outstring)
	move	a2, ra
	move	a1, a0
	lbu	a0, 0(a1)
1:
	beqz	a0, 2f
	nop
	bal	tgt_putchar
	addiu	a1, 1
	b	1b
	lbu	a0, 0(a1)

2:
	j	a2
	nop
END(outstring)

LEAF(hexserial)
	nop
	move	a2, ra
	move	a1, a0
	li	a3, 7
1:
	rol	a0, a1, 4
	move	a1, a0
	and	a0, 0xf
	la	v0, hexchar
	addu	v0, s0
	addu	v0, a0
	bal	tgt_putchar
	lbu	a0, 0(v0)

	bnez	a3, 1b
	addu	a3, -1

	j	a2
	nop
END(hexserial)

LEAF(tgt_putchar)
	nop
	la	v0, COM1_BASE_ADDR
1:
	lbu	v1, NSREG(NS16550_LSR)(v0)
	and	v1, LSR_TXRDY
	beqz	v1, 1b
	nop

	sb	a0, NSREG(NS16550_DATA)(v0)
	j	ra
	nop	
END(tgt_putchar)

LEAF(tgt_testchar)
	la	v0, COM1_BASE_ADDR
1:
	lbu	v1, NSREG(NS16550_LSR)(v0)
	and	v0,v1, LSR_RXRDY
	jr ra
	nop
END(tgt_testchar)

LEAF(tgt_getchar)
	la	v0, COM1_BASE_ADDR
1:
	lbu	v1, NSREG(NS16550_LSR)(v0)
	and	v1, LSR_RXRDY
	beqz	v1, 1b
	nop
	lb	v0, NSREG(NS16550_DATA)(v0)
	jr ra
	nop
END(tgt_getchar)


/* baud rate definitions, matching include/termios.h */
#define B0      0
#define B50     50      
#define B75     75
#define B110    110
#define B134    134
#define B150    150
#define B200    200
#define B300    300
#define B600    600
#define B1200   1200
#define B1800   1800
#define B2400   2400
#define B4800   4800
#define B9600   9600
#define B19200  19200
#define B38400  38400
#define B57600  57600
#define B115200 115200

LEAF(initserial)
	la	v0, COM1_BASE_ADDR
1:
	li	v1, FIFO_ENABLE|FIFO_RCV_RST|FIFO_XMT_RST|FIFO_TRIGGER_1
	sb	v1, NSREG(NS16550_FIFO)(v0)
	li	v1, CFCR_DLAB
	sb	v1, NSREG(NS16550_CFCR)(v0)
// 	li	v1, NS16550HZ/(16*CONS_BAUD)
// 	li	v1, (NS16550HZ*4)/(16*CONS_BAUD)
// 	li	v1, 16666666/(16*57600)
// 	li	v1, 25000000/(16*57600)
//zgj-2010-6-22 	li	v1, 40000000/(16*57600)
// 	li	v1, 37000000/(16*38400)
# 	li	v1, 25000000/(16*57600)
# 	li	v1, 33000000/(16*57600)
# 	li	v1, 50000000/(16*57600)
# 	li	v1, 96000000/(16*57600)
// 	li	v1, SD_FREQ*1000000/(16*115200)
 	li	v1, ((APB_CLK*(PLL_M + (PLL_FRAC_N & 0xff)/256)/4/CPU_DIV/CPU_2_SDRAM)/(16*CONS_BAUD))
# 	li	v1, 12000000/(16*57600)
# 	li	v1, 18000000/(16*57600)
//	li 	v1, 2
	sb	v1, NSREG(NS16550_DATA)(v0)
	srl	v1, 8
	sb	v1, NSREG(NS16550_IER)(v0)
	li	v1, CFCR_8BITS
	sb	v1, NSREG(NS16550_CFCR)(v0)
	li	v1, MCR_DTR|MCR_RTS
	sb	v1, NSREG(NS16550_MCR)(v0)
	li	v1, 0x0
	sb	v1, NSREG(NS16550_IER)(v0)
        
        #disable all interrupt
        li      v1, 0x0
        sb      v1, NSREG(NS16550_IER)(v0)
	j	ra
	nop
END(initserial)

__main:
	j	ra
	nop


	.rdata
transmit_pat_msg:
	.asciz	"\r\nInvalid transmit pattern.  Must be DDDD or DDxDDx\r\n"
v200_msg:
	.asciz	"\r\nPANIC! Unexpected TLB refill exception!\r\n"
v280_msg:
	.asciz	"\r\nPANIC! Unexpected XTLB refill exception!\r\n"
v380_msg:
	.asciz	"\r\nPANIC! Unexpected General exception!\r\n"
v400_msg:
	.asciz	"\r\nPANIC! Unexpected Interrupt exception!\r\n"
v480_msg:
	.asciz	"\r\nPANIC! You have been in the Ejtag Debug MOde Trap is 0!\r\n"
hexchar:
	.ascii	"0123456789abcdef"

	.text
	.align	2
/*
 *   I2C Functions used in early startup code to get SPD info from
 *   SDRAM modules. This code must be entirely PIC and RAM independent.
 */






LEAF(nullfunction)
	jr ra
	nop
END(nullfunction)




	.ent		cache_init
	.global	cache_init
	.set		noreorder
cache_init:
	move t1, ra
####part 2####
cache_detect_4way:
	.set	mips32
	mfc0	t4, CP0_CONFIG,1
	lui		v0, 0x7		//v0 = 0x7 << 16
	and		v0, t4, v0    
	srl		t3, v0, 16    //t3 = v0 >> 16  Icache组相联数 IA

	li		t5, 0x800 		//32*64
	srl		v1, t4,22		//v1 = t4 >> 22
	andi	v1, 7			//Icache每路的组数 64x2^S IS
	sll		t5, v1			//InstCacheSetSize
	sll		t5, t3			//t5 InstCacheSize


	andi	v0, t4, 0x0380
	srl		t7, v0, 7		//DA

	li		t6, 0x800 #32*64
	srl		v1, t4,13
	andi	v1, 7			//DS
	sll		t6, v1  #DataCacheSetSize
	sll		t6, t7  #t5 DataCacheSize

####part 3####
#	.set	mips3
	lui		a0, 0x8000			//a0 = 0x8000 << 16
	addu	a1, $0, t5
	addu	a2, $0, t6
cache_init_d2way:
/******************************/	//lxy
//	addiu	t3, t3, 1
//	li	t4, 0
//5:
/******************************/
#a0=0x80000000, a1=icache_size, a2=dcache_size
#a3, v0 and v1 used as local registers
	mtc0	$0, CP0_TAGHI
	addu	v0, $0, a0		//v0 = 0 + a0
	addu	v1, a0, a2		//v1 = a0 + a2
1:	slt		a3, v0, v1		//a3 = v0 < v1 ? 1 : 0
	beq		a3, $0, 1f		//if (a3 == 0) goto 1f
	nop
	mtc0	$0, CP0_TAGLO
	cache	Index_Store_Tag_D, 0x0(v0)	# 1 way
4:	beq		$0, $0, 1b
	addiu	v0, v0, 0x20
1:
cache_flush_i2way:
	addu	v0, $0, a0
	addu	v1, a0, a1
1:	slt		a3, v0, v1
	beq		a3, $0, 1f
	nop
	cache	Index_Invalidate_I, 0x0(v0)	# 1 way
4:	beq		$0, $0, 1b
	addiu	v0, v0, 0x20
1:
cache_flush_d2way:
	addu	v0, $0, a0
	addu	v1, a0, a2
1:	slt		a3, v0, v1
	beq		a3, $0, 1f
	nop
	cache	Index_Writeback_Inv_D, 0x0(v0) 	#1 way
4:	beq		$0, $0, 1b
	addiu	v0, v0, 0x20
/******************************/	//lxy
//	addiu	t4, t4, 1
//	addiu	a0, a0, 1
//	slt		t5, t4, t3
//	bne		t5, $0, 5b
//	nop
/******************************/
//	.set	mips0

1:
cache_init_finish:
	jr	t1
	nop
	.set	reorder
	.end	cache_init



#####################################################
#if 0 
LEAF(ENABLE_CACHE)
#		".set mips2;\n" \
     mfc0   $4,$16
     and    $4,$4,0xfffffff8
     or     $4,$4,0x3
     mtc0   $4,$16
	 jr	ra
	 nop
END(ENABLE_CACHE)

LEAF(FLUSH_CACHE2)
#   .set mips3;\n" \
	mfc0	$3, $15 #;			# read processor ID register;\n" \
 	li		$2, 0x6303 #;				#godson2f prid;\n" \
 	beq		$2, $3, godson_2f #;\n" \
 	nop #;\n" \
	li		$2, 0x6302 #;				#godson2e prid;\n" \
	bne	$2, $3,11f #;\n" \
	nop #;\n" \
# godson2e;\n" \
    godson_2f: #" \
	li	  $2, 0x80000000 #;\n" \
    addu  $3,$2,512*1024/4 #;\n" \
10:\n" \
	cache	3, 0($2) #;\n" \
	cache	3, 1($2) #;\n" \
	cache	3, 2($2) #;\n" \
	cache	3, 3($2) #;\n" \
	addu	$2, 32   #;\n" \
	bne	    $2,$3, 10b #;\n" \
	nop  #;\n" \
11:
	jr ra
	nop
END(FLUSH_CACHE2)	

#ifndef WAYBIT
#define WAYBIT 0
#endif
#define WAY__(x) #x
#define WAY_(x,y) WAY__((x<<y))
#define WAY(x) WAY_(x,WAYBIT)
LEAF(FLUSH_CACHE)

		.set mips3 
        li    $5,0x81000000 #;\n" 
        addu  $6,$5, 16384   #;\n" 
1:  
        cache  1," WAY(0) "($5) #;\n" 
        cache  1," WAY(1) "($5) #;\n" 
        cache  1," WAY(2) "($5) #;\n" 
        cache  1," WAY(3) "($5) #;\n" 
        cache  0," WAY(0) "($5) #;\n" 
        cache  0," WAY(1) "($5) #;\n" 
        cache  0," WAY(2) "($5) #;\n" 
        cache  0," WAY(3) "($5) #;\n" 
        add    $5,$5,32         #;\n" 
        bne    $5,$6,1b         #;\n" 
        nop                     #;\n" 
# replace	   
		cache  1,	0($5) #;\n" 
        cache  1,	1($5) #;\n" 
        cache  1,	2($5) #;\n" 
        cache  1,	3($5) #;\n" 
        cache  0,	0($5) #;\n" 
        cache  0,	1($5) #;\n" 
        cache  0,	2($5) #;\n" 
        cache  0,	3($5) #;\n" 
		add    $5,$5,32         #;\n" 
        bne    $5,$6,1b         #;\n" 
        nop           

		lui	a0, 0x8000
		addu	a1, $0, t5
		addu	a2, $0, t6
#a0=0x80000000, a1=icache_size, a2=dcache_size
#a3, v0 and v1 used as local registers
		mtc0	$0, CP0_TAGHI
		addu	v0, $0, a0
		cache	Index_Invalidate_I, 0x0(v0)	# 1 way
	
		mtc0	$0, CP0_TAGLO
		addu	v0, $0, a0
		cache	Index_Invalidate_I, 0x0(v0)	# 1 way
#	cache	Index_Store_Tag_D, 0x0(v0)	# 1 way
	
		li		a1,	0
		mtc0  	a1, CP0_TAGHI
		mtc0  	a1, CP0_TAGLO
/* ################################################ */
#a0=0x80000000, a1=icache_size, a2=dcache_size
#a3, v0 and v1 used as local registers
		li		a0,	0x80000000
		li		a1,	16384
		li		a2,	16384

    	mtc0   $0, CP0_TAGHI
    	
		addu   v0, $0, a0  ###??? $0 = 0
	    addu   v1, a0, a2
	1:  slt a3, v0, v1
		beq a3, $0, 1f
		nop
		mtc0   $0, CP0_TAGLO
		cache Index_Store_Tag_D, 0x0(v0)
	    mtc0   $0, CP0_TAGLO
		cache Index_Store_Tag_D, 0x1(v0)
	    mtc0   $0, CP0_TAGLO
		cache   Index_Store_Tag_D, 0x2(v0)
	    mtc0   $0, CP0_TAGLO
		cache   Index_Store_Tag_D, 0x3(v0)
	    beq $0, $0, 1b   ###???
		addiu v0, v0, 0x10
1:		jr	ra
		nop
##		.set mips0;\n" 
END(FLUSH_CACHE)
#endif

##include "gmac_test.S"
